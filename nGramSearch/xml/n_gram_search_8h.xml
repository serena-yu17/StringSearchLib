<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="n_gram_search_8h" kind="file" language="C++">
    <compoundname>nGramSearch.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">mutex</includes>
    <includes local="no">cctype</includes>
    <includes local="no">wchar.h</includes>
    <includes local="no">cwctype</includes>
    <includes local="no">unordered_set</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">future</includes>
    <includes local="no">intrin.h</includes>
    <includes local="no">shared_mutex</includes>
    <includes local="no">memory</includes>
    <includes local="no">atomic</includes>
    <includes local="no">cmath</includes>
    <includedby refid="n_gram_search_8cpp" local="yes">nGramSearch.cpp</includedby>
    <incdepgraph>
      <node id="33">
        <label>atomic</label>
      </node>
      <node id="34">
        <label>cmath</label>
      </node>
      <node id="20">
        <label>nGramSearch.h</label>
        <link refid="n_gram_search_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="27">
        <label>unordered_set</label>
      </node>
      <node id="25">
        <label>wchar.h</label>
      </node>
      <node id="29">
        <label>future</label>
      </node>
      <node id="24">
        <label>cctype</label>
      </node>
      <node id="22">
        <label>unordered_map</label>
      </node>
      <node id="31">
        <label>shared_mutex</label>
      </node>
      <node id="26">
        <label>cwctype</label>
      </node>
      <node id="23">
        <label>mutex</label>
      </node>
      <node id="28">
        <label>algorithm</label>
      </node>
      <node id="30">
        <label>intrin.h</label>
      </node>
      <node id="32">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="35">
        <label>nGramSearch.h</label>
        <link refid="n_gram_search_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>nGramSearch.cpp</label>
        <link refid="n_gram_search_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_string_index" prot="public">StringIndex</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="n_gram_search_8h_1a19524bf255f7350e1b5b90ef69f3a36a" prot="public" static="no">
        <name>NGRAMSEARCH_H</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="3" column="9" bodyfile="nGramSearch.h" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" prot="public" static="no">
        <name>DLLEXP</name>
        <initializer>extern &quot;C&quot; __declspec(dllexport)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="21" column="9" bodyfile="nGramSearch.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="n_gram_search_8h_1aaa5964579ce0a1632812d1148673924a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void index2D</definition>
        <argsstring>(char *const guid, char ***const key, const uint64_t size, const uint16_t rowSize, float **const weight=NULL, const uint16_t gSize=3)</argsstring>
        <name>index2D</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>char ***const</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rowSize</declname>
        </param>
        <param>
          <type>float **const</type>
          <declname>weight</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>gSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index the library based on a 2D array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>words</parametername>
</parameternamelist>
<parameterdescription>
<para>For each row, the first string is the key to be mapped to, and the second string is the description mapped to the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the <computeroutput>words</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of grams to be created. Default 3 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the relative weight of each key. Default 1 for all </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="31" column="1" bodyfile="nGramSearch.cpp" bodystart="12" bodyend="16"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1afc53fa96346d221be5827943db60aac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void index2DW</definition>
        <argsstring>(char *const guid, wchar_t ***const key, const uint64_t size, const uint16_t rowSize, float **const weight=NULL, const uint16_t gSize=3)</argsstring>
        <name>index2DW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>wchar_t ***const</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rowSize</declname>
        </param>
        <param>
          <type>float **const</type>
          <declname>weight</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>gSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index the library based on a 2D array. Wide string version <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>words</parametername>
</parameternamelist>
<parameterdescription>
<para>For each row, the first string is the key to be mapped to, and the second string is the description mapped to the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the <computeroutput>words</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of grams to be created. Default 3 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the relative weight of each key. Default 1 for all </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="41" column="1" bodyfile="nGramSearch.cpp" bodystart="18" bodyend="22"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a2d23f58044dff7a9715b0f36aba5a69a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void index</definition>
        <argsstring>(char *const guid, char **const key, const uint64_t size, const uint16_t rowSize, float *const weight=NULL, const uint16_t gSize=3)</argsstring>
        <name>index</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>char **const</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rowSize</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>weight</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>gSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index the library based on a string array of key, and another array of additional text, e.g. description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>words</parametername>
</parameternamelist>
<parameterdescription>
<para>Words to be searched for. For each row, the first word is used as the master key, in which the row size is <computeroutput>rowSize</computeroutput>. All rows are flattened into a 1D-array, and can be extracted based on <computeroutput>rowSize</computeroutput>. In a search, all queries of the words in a row will return the master key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the <computeroutput>words</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of each text rows of <computeroutput>words</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of weight values for each key. It should be at least as long as the number of rows, i.e. <computeroutput>size</computeroutput> / <computeroutput>rowSize</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of grams to be created. Default 3. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="54" column="1" bodyfile="nGramSearch.cpp" bodystart="24" bodyend="28"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1aad19cfae74665ec71b1768bd6ba5a342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void indexW</definition>
        <argsstring>(char *const guid, wchar_t **const key, const uint64_t size, const uint16_t rowSize, float *const weight=NULL, const uint16_t gSize=3)</argsstring>
        <name>indexW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>wchar_t **const</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rowSize</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>weight</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>gSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index the library based on a string array of key, and another array of additional text, e.g. description. Wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>words</parametername>
</parameternamelist>
<parameterdescription>
<para>Words to be searched for. For each row, the first word is used as the master key, in which the row size is <computeroutput>rowSize</computeroutput>. All rows are flattened into a 1D-array, and can be extracted based on <computeroutput>rowSize</computeroutput>. In a search, all queries of the words in a row will return the master key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the <computeroutput>words</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of each text rows of <computeroutput>words</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of weight values for each key. It should be at least as long as the number of rows, i.e. <computeroutput>size</computeroutput> / <computeroutput>rowSize</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of grams to be created. Default 3. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="68" column="1" bodyfile="nGramSearch.cpp" bodystart="30" bodyend="34"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a8769607b12e99984ad3ee0e8ab1ff6eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void search</definition>
        <argsstring>(char *const guid, const char *query, char ***results, uint32_t *size, const float threshold=0, uint32_t limit=100)</argsstring>
        <name>search</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>results</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>threshold</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search the query in the indexed library identified by the guid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The query string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to a string array for output. The memory will be allocated by new. Must call <computeroutput>release</computeroutput> to clean up after use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Output the length of the <computeroutput>results</computeroutput> array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest acceptable matching %, as a value between 0 and 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum results generated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="80" column="1" bodyfile="nGramSearch.cpp" bodystart="36" bodyend="46"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a2b6cf6d441b1ac4e82251f7f3c806965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void searchW</definition>
        <argsstring>(char *const guid, const wchar_t *query, wchar_t ***results, uint32_t *size, const float threshold=0, uint32_t limit=100)</argsstring>
        <name>searchW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>wchar_t ***</type>
          <declname>results</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>threshold</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search the query in the indexed library identified by the guid. Wide string version <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The query string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to a string array for output. The memory will be allocated by new. Must call <computeroutput>releaseW</computeroutput> to clean up after use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Output the length of the <computeroutput>results</computeroutput> array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest acceptable matching %, as a value between 0 and 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum results generated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="93" column="1" bodyfile="nGramSearch.cpp" bodystart="48" bodyend="58"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a1bf34fd9c73ce48384b68102b1b85a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void release</definition>
        <argsstring>(char *const guid, char ***results, uint64_t size)</argsstring>
        <name>release</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>results</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To release the memory allocated for the result in the <computeroutput>search</computeroutput> function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>The result returned by the &lt;search&gt; function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>result</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="101" column="1" bodyfile="nGramSearch.cpp" bodystart="60" bodyend="66"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a9b9665af85ac3ef69cc7635bcd9b2a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void releaseW</definition>
        <argsstring>(char *const guid, wchar_t ***results, uint64_t size)</argsstring>
        <name>releaseW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>wchar_t ***</type>
          <declname>results</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To release the memory allocated for the result in the &lt;search&gt; function. Wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>The result returned by the &lt;search&gt; function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>result</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="110" column="1" bodyfile="nGramSearch.cpp" bodystart="68" bodyend="74"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1aaaf853ea1e0eb3fed9dfe80ebcf1bd13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void dispose</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>dispose</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To dispose a library indexed. If the library does not exist, <computeroutput>dispose</computeroutput> will ignore it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="116" column="1" bodyfile="nGramSearch.cpp" bodystart="76" bodyend="80"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1ae608fed7c79e70f7f22fcacd54598422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void disposeW</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>disposeW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To dispose a library indexed. If the library does not exist, <computeroutput>dispose</computeroutput> will ignore it. Wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="123" column="1" bodyfile="nGramSearch.cpp" bodystart="82" bodyend="86"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a3707fd57725e4682d59f6dd850099921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> uint64_t</type>
        <definition>DLLEXP uint64_t getSize</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>getSize</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To obtain the current word map size <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="129" column="1" bodyfile="nGramSearch.cpp" bodystart="88" bodyend="95"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a4b4a824212aaca2aaefd93c04f53c314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> uint64_t</type>
        <definition>DLLEXP uint64_t getSizeW</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>getSizeW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To obtain the current word map size Wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="136" column="1" bodyfile="nGramSearch.cpp" bodystart="97" bodyend="104"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a9605a70fe41354e09d3bd6b330e88c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> uint64_t</type>
        <definition>DLLEXP uint64_t getLibSize</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>getLibSize</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To obtain the current n-gram library size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="142" column="1" bodyfile="nGramSearch.cpp" bodystart="106" bodyend="113"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8h_1a8fc3df66eb3985c704fb6f65c4327376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> uint64_t</type>
        <definition>DLLEXP uint64_t getLibSizeW</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>getLibSizeW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To obtain the current n-gram library size. wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.h" line="149" column="1" bodyfile="nGramSearch.cpp" bodystart="115" bodyend="122"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NGRAMSEARCH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="n_gram_search_8h_1a19524bf255f7350e1b5b90ef69f3a36a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NGRAMSEARCH_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wchar.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cwctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;future&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;intrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;shared_mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DLLEXP<sp/>extern<sp/>&quot;C&quot;<sp/>__declspec(dllexport)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1aaa5964579ce0a1632812d1148673924a" kindref="member">index2D</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>NULL,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize<sp/>=<sp/>3);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1afc53fa96346d221be5827943db60aac4" kindref="member">index2DW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">***<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>NULL,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize<sp/>=<sp/>3);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1a2d23f58044dff7a9715b0f36aba5a69a" kindref="member">index</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>NULL,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize<sp/>=<sp/>3);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1aad19cfae74665ec71b1768bd6ba5a342" kindref="member">indexW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight<sp/>=<sp/>NULL,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize<sp/>=<sp/>3);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1a8769607b12e99984ad3ee0e8ab1ff6eb" kindref="member">search</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>query,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/>results,<sp/>uint32_t*<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>0,<sp/>uint32_t<sp/>limit<sp/>=<sp/>100);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1a2b6cf6d441b1ac4e82251f7f3c806965" kindref="member">searchW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>query,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">***<sp/>results,<sp/>uint32_t*<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold<sp/>=<sp/>0,<sp/>uint32_t<sp/>limit<sp/>=<sp/>100);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1a1bf34fd9c73ce48384b68102b1b85a61" kindref="member">release</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/>results,<sp/>uint64_t<sp/>size);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1a9b9665af85ac3ef69cc7635bcd9b2a5c" kindref="member">releaseW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">***<sp/>results,<sp/>uint64_t<sp/>size);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1aaaf853ea1e0eb3fed9dfe80ebcf1bd13" kindref="member">dispose</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8h_1ae608fed7c79e70f7f22fcacd54598422" kindref="member">disposeW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/>uint64_t<sp/><ref refid="n_gram_search_8h_1a3707fd57725e4682d59f6dd850099921" kindref="member">getSize</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/>uint64_t<sp/><ref refid="n_gram_search_8h_1a4b4a824212aaca2aaefd93c04f53c314" kindref="member">getSizeW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/>uint64_t<sp/><ref refid="n_gram_search_8h_1a9605a70fe41354e09d3bd6b330e88c29" kindref="member">getLibSize</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/>uint64_t<sp/><ref refid="n_gram_search_8h_1a8fc3df66eb3985c704fb6f65c4327376" kindref="member">getLibSizeW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::unordered_set&lt;char&gt;<sp/>wordChar</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>({</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;$&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;g&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;h&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;j&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;k&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;m&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;p&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;q&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;y&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;G&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;J&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;K&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;L&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;N&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;O&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;P&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;Q&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;V&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;Y&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ltrim(std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.erase(s.begin(),<sp/>std::find_if(s.begin(),<sp/>s.end(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::isspace(static_cast&lt;unsigned<sp/>char&gt;(ch));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ltrim(std::wstring<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.erase(s.begin(),<sp/>std::find_if(s.begin(),<sp/>s.end(),<sp/>[](</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::iswspace(ch);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rtrim(std::string<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.erase(std::find_if(s.rbegin(),<sp/>s.rend(),<sp/>[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::isspace(static_cast&lt;unsigned<sp/>char&gt;(ch));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}).base(),<sp/>s.end());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rtrim(std::wstring<sp/>&amp;s)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.erase(std::find_if(s.rbegin(),<sp/>s.rend(),<sp/>[](</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>ch)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!std::iswspace(ch);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}).base(),<sp/>s.end());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toUpper(std::string&amp;<sp/>str)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>ch<sp/>:<sp/>str)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>toupper(ch);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>toUpper(std::wstring&amp;<sp/>str)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">&amp;<sp/>ch<sp/>:<sp/>str)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>towupper(ch);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>escapeBlank(std::string&amp;<sp/>str)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>ch<sp/>:<sp/>str)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wordChar.find(ch)<sp/>==<sp/>wordChar.end())</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>escapeBlank(std::wstring&amp;<sp/>str)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">&amp;<sp/>ch<sp/>:<sp/>str)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>ch<sp/>&lt;=<sp/>127)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>asciiChar<sp/>=<sp/>(char)ch;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(wordChar.find(asciiChar)<sp/>==<sp/>wordChar.end())</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="261" refid="class_string_index" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_string_index" kindref="compound">StringIndex</ref></highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="265" refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>str_t::value_type<sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_string_index_1aec0c7112ef81d953265033f9a779730f" kindref="member">StringIndex</ref>(<ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a95acf789f43ead39b067d1c82d3a9b02" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_string_index_1aec0c7112ef81d953265033f9a779730f" kindref="member">StringIndex</ref>(<ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>***<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a95acf789f43ead39b067d1c82d3a9b02" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_string_index_1aec0c7112ef81d953265033f9a779730f" kindref="member">StringIndex</ref>(std::vector&lt;std::vector&lt;str_t&gt;&gt;&amp;<sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/>gSize,<sp/>std::vector&lt;std::vector&lt;float&gt;&gt;&amp;<sp/>weight);<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a56c849706990da23bb621522da959fa9" kindref="member">init</ref>(std::unordered_map&lt;str_t,<sp/>std::vector&lt;std::pair&lt;str_t,<sp/>float&gt;&gt;&gt;&amp;<sp/>tempWordMap);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a924cd52b4e055853db22f89e73f71fce" kindref="member">getGrams</ref>(str_t*<sp/>str);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a924cd52b4e055853db22f89e73f71fce" kindref="member">getGrams</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str_t&amp;<sp/>str,<sp/>std::vector&lt;str_t&gt;&amp;<sp/>generatedGrams);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a7e326eb6fe367a6758c21aefbf64fe51" kindref="member">buildGrams</ref>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a97835599308c1e5feb47323545584dfd" kindref="member">stringMatch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str_t&amp;<sp/>query,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str_t&amp;<sp/>source,<sp/>std::vector&lt;size_t&gt;&amp;<sp/>row1,<sp/>std::vector&lt;size_t&gt;&amp;<sp/>row2);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a32f2294a19ad5360bd62f1ede07c6c5e" kindref="member">getMatchScore</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str_t&amp;<sp/>query,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>first,<sp/>std::vector&lt;str_t*&gt;&amp;<sp/>targets,<sp/>std::vector&lt;float&gt;&amp;<sp/>currentScore);<sp/></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a309f7697439fb3428de3c63dca6cdaa4" kindref="member">searchShort</ref>(str_t&amp;<sp/>query,<sp/>std::unordered_map&lt;str_t*,<sp/>float&gt;&amp;<sp/>score);<sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a80ddf83f3f207004142458317609c6d6" kindref="member">searchLong</ref>(str_t&amp;<sp/>query,<sp/>std::unordered_map&lt;str_t*,<sp/>float&gt;&amp;<sp/>score);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1adedd1463c2745dcd1e36ee672f6a6613" kindref="member">_search</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>*<sp/>query,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>limit,<sp/>std::vector&lt;str_t&gt;&amp;<sp/>result);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1aa11036396dce714b8c383564ffeaac70" kindref="member">search</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>*<sp/>query,<sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>***<sp/>results,<sp/>uint32_t*<sp/><ref refid="class_string_index_1a95acf789f43ead39b067d1c82d3a9b02" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold,<sp/>uint32_t<sp/>limit);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a014f9cc45c6e06aa25b04186c89ec032" kindref="member">release</ref>(<ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>***<sp/>results,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a95acf789f43ead39b067d1c82d3a9b02" kindref="member">size</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="class_string_index_1a95acf789f43ead39b067d1c82d3a9b02" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="class_string_index_1af92d29d09732cbf9104cc7e942859976" kindref="member">libSize</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="399" refid="class_string_index_1ab9646ee784190f04dba8d1e245c6be18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1ab9646ee784190f04dba8d1e245c6be18" kindref="member">compareScores</ref>(std::pair&lt;str_t,<sp/>float&gt;&amp;<sp/>a,<sp/>std::pair&lt;str_t,<sp/>float&gt;&amp;<sp/>b)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.second<sp/>&gt;<sp/>b.second)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a.second<sp/>&lt;<sp/>b.second)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.first.size()<sp/>&lt;<sp/>b.first.size();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="413" refid="class_string_index_1ac75c72953237b8361e7f35fe952657c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1ac75c72953237b8361e7f35fe952657c4" kindref="member">trim</ref>(str_t<sp/>&amp;s)<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ltrim(s);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rtrim(s);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="421" refid="class_string_index_1ac41713b30c0c373a3e9fc3efe13f9949" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;str_t&gt;<sp/><ref refid="class_string_index_1ac41713b30c0c373a3e9fc3efe13f9949" kindref="member">longLib</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="424" refid="class_string_index_1a4f0c00d4ace341b657ac1b233b70534b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;str_t&gt;<sp/><ref refid="class_string_index_1a4f0c00d4ace341b657ac1b233b70534b" kindref="member">shortLib</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="class_string_index_1aaf98238698a0294638fb474c4962eac7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;str_t*,<sp/>std::vector&lt;std::pair&lt;str_t,<sp/>float&gt;&gt;&gt;<sp/><ref refid="class_string_index_1aaf98238698a0294638fb474c4962eac7" kindref="member">wordMap</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="class_string_index_1adae09412441dcac487fd942660ca72f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;str_t,<sp/>std::unordered_set&lt;str_t*&gt;&gt;<sp/><ref refid="class_string_index_1adae09412441dcac487fd942660ca72f5" kindref="member">ngrams</ref>;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="class_string_index_1aadcaf2dd0a288b18d85febf8157de6be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="class_string_index_1aadcaf2dd0a288b18d85febf8157de6be" kindref="member">gramSize</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sectionSize<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>std::atomic&lt;bool&gt;<sp/>indexed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distanceFactor<sp/>=<sp/>0.2f;</highlight></codeline>
<codeline lineno="444"><highlight class="normal">};<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="nGramSearch.h"/>
  </compounddef>
</doxygen>
