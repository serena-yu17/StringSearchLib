<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="n_gram_search_8cpp" kind="file" language="C++">
    <compoundname>nGramSearch.cpp</compoundname>
    <includes refid="n_gram_search_8h" local="yes">nGramSearch.h</includes>
    <incdepgraph>
      <node id="17">
        <label>atomic</label>
      </node>
      <node id="18">
        <label>cmath</label>
      </node>
      <node id="4">
        <label>nGramSearch.h</label>
        <link refid="n_gram_search_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="3">
        <label>nGramSearch.cpp</label>
        <link refid="n_gram_search_8cpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>unordered_set</label>
      </node>
      <node id="9">
        <label>wchar.h</label>
      </node>
      <node id="13">
        <label>future</label>
      </node>
      <node id="8">
        <label>cctype</label>
      </node>
      <node id="6">
        <label>unordered_map</label>
      </node>
      <node id="15">
        <label>shared_mutex</label>
      </node>
      <node id="10">
        <label>cwctype</label>
      </node>
      <node id="7">
        <label>mutex</label>
      </node>
      <node id="12">
        <label>algorithm</label>
      </node>
      <node id="14">
        <label>intrin.h</label>
      </node>
      <node id="16">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" prot="public" static="no" mutable="no">
        <type>shared_mutex</type>
        <definition>shared_mutex mainLock</definition>
        <argsstring></argsstring>
        <name>mainLock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="7" column="1" bodyfile="nGramSearch.cpp" bodystart="7" bodyend="-1"/>
        <referencedby refid="n_gram_search_8h_1aaa5964579ce0a1632812d1148673924a" compoundref="n_gram_search_8cpp" startline="12" endline="16">index2D</referencedby>
        <referencedby refid="n_gram_search_8h_1afc53fa96346d221be5827943db60aac4" compoundref="n_gram_search_8cpp" startline="18" endline="22">index2DW</referencedby>
        <referencedby refid="n_gram_search_8h_1a2d23f58044dff7a9715b0f36aba5a69a" compoundref="n_gram_search_8cpp" startline="24" endline="28">index</referencedby>
        <referencedby refid="n_gram_search_8h_1aad19cfae74665ec71b1768bd6ba5a342" compoundref="n_gram_search_8cpp" startline="30" endline="34">indexW</referencedby>
        <referencedby refid="n_gram_search_8h_1a8769607b12e99984ad3ee0e8ab1ff6eb" compoundref="n_gram_search_8cpp" startline="36" endline="46">search</referencedby>
        <referencedby refid="n_gram_search_8h_1a2b6cf6d441b1ac4e82251f7f3c806965" compoundref="n_gram_search_8cpp" startline="48" endline="58">searchW</referencedby>
        <referencedby refid="n_gram_search_8h_1a1bf34fd9c73ce48384b68102b1b85a61" compoundref="n_gram_search_8cpp" startline="60" endline="66">release</referencedby>
        <referencedby refid="n_gram_search_8h_1a9b9665af85ac3ef69cc7635bcd9b2a5c" compoundref="n_gram_search_8cpp" startline="68" endline="74">releaseW</referencedby>
        <referencedby refid="n_gram_search_8h_1aaaf853ea1e0eb3fed9dfe80ebcf1bd13" compoundref="n_gram_search_8cpp" startline="76" endline="80">dispose</referencedby>
        <referencedby refid="n_gram_search_8h_1ae608fed7c79e70f7f22fcacd54598422" compoundref="n_gram_search_8cpp" startline="82" endline="86">disposeW</referencedby>
        <referencedby refid="n_gram_search_8h_1a3707fd57725e4682d59f6dd850099921" compoundref="n_gram_search_8cpp" startline="88" endline="95">getSize</referencedby>
        <referencedby refid="n_gram_search_8h_1a4b4a824212aaca2aaefd93c04f53c314" compoundref="n_gram_search_8cpp" startline="97" endline="104">getSizeW</referencedby>
        <referencedby refid="n_gram_search_8h_1a9605a70fe41354e09d3bd6b330e88c29" compoundref="n_gram_search_8cpp" startline="106" endline="113">getLibSize</referencedby>
        <referencedby refid="n_gram_search_8h_1a8fc3df66eb3985c704fb6f65c4327376" compoundref="n_gram_search_8cpp" startline="115" endline="122">getLibSizeW</referencedby>
      </memberdef>
      <memberdef kind="variable" id="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" prot="public" static="no" mutable="no">
        <type>unordered_map&lt; string, unique_ptr&lt; <ref refid="class_string_index" kindref="compound">StringIndex</ref>&lt; string &gt; &gt; &gt;</type>
        <definition>unordered_map&lt;string, unique_ptr&lt;StringIndex&lt;string&gt; &gt; &gt; indexed</definition>
        <argsstring></argsstring>
        <name>indexed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="9" column="1" bodyfile="nGramSearch.cpp" bodystart="9" bodyend="-1"/>
        <referencedby refid="n_gram_search_8h_1aaa5964579ce0a1632812d1148673924a" compoundref="n_gram_search_8cpp" startline="12" endline="16">index2D</referencedby>
        <referencedby refid="n_gram_search_8h_1a2d23f58044dff7a9715b0f36aba5a69a" compoundref="n_gram_search_8cpp" startline="24" endline="28">index</referencedby>
        <referencedby refid="n_gram_search_8h_1a8769607b12e99984ad3ee0e8ab1ff6eb" compoundref="n_gram_search_8cpp" startline="36" endline="46">search</referencedby>
        <referencedby refid="n_gram_search_8h_1a1bf34fd9c73ce48384b68102b1b85a61" compoundref="n_gram_search_8cpp" startline="60" endline="66">release</referencedby>
        <referencedby refid="n_gram_search_8h_1aaaf853ea1e0eb3fed9dfe80ebcf1bd13" compoundref="n_gram_search_8cpp" startline="76" endline="80">dispose</referencedby>
        <referencedby refid="n_gram_search_8h_1a3707fd57725e4682d59f6dd850099921" compoundref="n_gram_search_8cpp" startline="88" endline="95">getSize</referencedby>
        <referencedby refid="n_gram_search_8h_1a9605a70fe41354e09d3bd6b330e88c29" compoundref="n_gram_search_8cpp" startline="106" endline="113">getLibSize</referencedby>
        <referencedby refid="class_string_index_1a7e326eb6fe367a6758c21aefbf64fe51" compoundref="n_gram_search_8cpp" startline="143" endline="148">StringIndex&lt; str_t &gt;::buildGrams</referencedby>
        <referencedby refid="class_string_index_1aa11036396dce714b8c383564ffeaac70" compoundref="n_gram_search_8cpp" startline="519" endline="542">StringIndex&lt; str_t &gt;::search</referencedby>
      </memberdef>
      <memberdef kind="variable" id="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" prot="public" static="no" mutable="no">
        <type>unordered_map&lt; string, unique_ptr&lt; <ref refid="class_string_index" kindref="compound">StringIndex</ref>&lt; wstring &gt; &gt; &gt;</type>
        <definition>unordered_map&lt;string, unique_ptr&lt;StringIndex&lt;wstring&gt; &gt; &gt; indexedW</definition>
        <argsstring></argsstring>
        <name>indexedW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="10" column="1" bodyfile="nGramSearch.cpp" bodystart="10" bodyend="-1"/>
        <referencedby refid="n_gram_search_8h_1afc53fa96346d221be5827943db60aac4" compoundref="n_gram_search_8cpp" startline="18" endline="22">index2DW</referencedby>
        <referencedby refid="n_gram_search_8h_1aad19cfae74665ec71b1768bd6ba5a342" compoundref="n_gram_search_8cpp" startline="30" endline="34">indexW</referencedby>
        <referencedby refid="n_gram_search_8h_1a2b6cf6d441b1ac4e82251f7f3c806965" compoundref="n_gram_search_8cpp" startline="48" endline="58">searchW</referencedby>
        <referencedby refid="n_gram_search_8h_1a9b9665af85ac3ef69cc7635bcd9b2a5c" compoundref="n_gram_search_8cpp" startline="68" endline="74">releaseW</referencedby>
        <referencedby refid="n_gram_search_8h_1ae608fed7c79e70f7f22fcacd54598422" compoundref="n_gram_search_8cpp" startline="82" endline="86">disposeW</referencedby>
        <referencedby refid="n_gram_search_8h_1a4b4a824212aaca2aaefd93c04f53c314" compoundref="n_gram_search_8cpp" startline="97" endline="104">getSizeW</referencedby>
        <referencedby refid="n_gram_search_8h_1a8fc3df66eb3985c704fb6f65c4327376" compoundref="n_gram_search_8cpp" startline="115" endline="122">getLibSizeW</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="n_gram_search_8cpp_1af013284ba3a5a4e52dedfb3829eb21f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void index2D</definition>
        <argsstring>(char *const guid, char ***const words, const uint64_t size, const uint16_t rowSize, float **const weight, const uint16_t gSize)</argsstring>
        <name>index2D</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>char ***const</type>
          <declname>key</declname>
          <defname>words</defname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rowSize</declname>
        </param>
        <param>
          <type>float **const</type>
          <declname>weight</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>gSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index the library based on a 2D array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>words</parametername>
</parameternamelist>
<parameterdescription>
<para>For each row, the first string is the key to be mapped to, and the second string is the description mapped to the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the <computeroutput>words</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of grams to be created. Default 3 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the relative weight of each key. Default 1 for all </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="12" column="1" bodyfile="nGramSearch.cpp" bodystart="12" bodyend="16"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a7004665131db8bedab1bac753eb74afa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void index2DW</definition>
        <argsstring>(char *const guid, wchar_t ***const words, const uint64_t size, const uint16_t rowSize, float **const weight, const uint16_t gSize)</argsstring>
        <name>index2DW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>wchar_t ***const</type>
          <declname>key</declname>
          <defname>words</defname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rowSize</declname>
        </param>
        <param>
          <type>float **const</type>
          <declname>weight</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>gSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index the library based on a 2D array. Wide string version <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>words</parametername>
</parameternamelist>
<parameterdescription>
<para>For each row, the first string is the key to be mapped to, and the second string is the description mapped to the key </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the <computeroutput>words</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of grams to be created. Default 3 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of the relative weight of each key. Default 1 for all </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="18" column="1" bodyfile="nGramSearch.cpp" bodystart="18" bodyend="22"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a1f2a9cd58e608bec8e0d916a16c56677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void index</definition>
        <argsstring>(char *const guid, char **const words, const uint64_t size, const uint16_t rowSize, float *const weight, const uint16_t gSize)</argsstring>
        <name>index</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>char **const</type>
          <declname>key</declname>
          <defname>words</defname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rowSize</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>weight</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>gSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index the library based on a string array of key, and another array of additional text, e.g. description. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>words</parametername>
</parameternamelist>
<parameterdescription>
<para>Words to be searched for. For each row, the first word is used as the master key, in which the row size is <computeroutput>rowSize</computeroutput>. All rows are flattened into a 1D-array, and can be extracted based on <computeroutput>rowSize</computeroutput>. In a search, all queries of the words in a row will return the master key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the <computeroutput>words</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of each text rows of <computeroutput>words</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of weight values for each key. It should be at least as long as the number of rows, i.e. <computeroutput>size</computeroutput> / <computeroutput>rowSize</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of grams to be created. Default 3. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="24" column="1" bodyfile="nGramSearch.cpp" bodystart="24" bodyend="28"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1ae6a0e417451a810549d7ac565af86a37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void indexW</definition>
        <argsstring>(char *const guid, wchar_t **const words, const uint64_t size, const uint16_t rowSize, float *const weight, const uint16_t gSize)</argsstring>
        <name>indexW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>wchar_t **const</type>
          <declname>key</declname>
          <defname>words</defname>
        </param>
        <param>
          <type>const uint64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rowSize</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>weight</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>gSize</declname>
          <defval>3</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Index the library based on a string array of key, and another array of additional text, e.g. description. Wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>words</parametername>
</parameternamelist>
<parameterdescription>
<para>Words to be searched for. For each row, the first word is used as the master key, in which the row size is <computeroutput>rowSize</computeroutput>. All rows are flattened into a 1D-array, and can be extracted based on <computeroutput>rowSize</computeroutput>. In a search, all queries of the words in a row will return the master key. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the <computeroutput>words</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of each text rows of <computeroutput>words</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of weight values for each key. It should be at least as long as the number of rows, i.e. <computeroutput>size</computeroutput> / <computeroutput>rowSize</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gSize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of grams to be created. Default 3. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="30" column="1" bodyfile="nGramSearch.cpp" bodystart="30" bodyend="34"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a23c98275cff594b7e64b62a086f04dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void search</definition>
        <argsstring>(char *const guid, const char *query, char ***results, uint32_t *size, const float threshold, uint32_t limit)</argsstring>
        <name>search</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>results</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>threshold</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search the query in the indexed library identified by the guid. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The query string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to a string array for output. The memory will be allocated by new. Must call <computeroutput>release</computeroutput> to clean up after use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Output the length of the <computeroutput>results</computeroutput> array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest acceptable matching %, as a value between 0 and 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum results generated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="36" column="1" bodyfile="nGramSearch.cpp" bodystart="36" bodyend="46"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1ab6258c7b1ad261783e75156ba81d97e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void searchW</definition>
        <argsstring>(char *const guid, const wchar_t *query, wchar_t ***results, uint32_t *size, const float threshold, uint32_t limit)</argsstring>
        <name>searchW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>const wchar_t *</type>
          <declname>query</declname>
        </param>
        <param>
          <type>wchar_t ***</type>
          <declname>results</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>threshold</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>limit</declname>
          <defval>100</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search the query in the indexed library identified by the guid. Wide string version <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>query</parametername>
</parameternamelist>
<parameterdescription>
<para>The query string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to a string array for output. The memory will be allocated by new. Must call <computeroutput>releaseW</computeroutput> to clean up after use. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Output the length of the <computeroutput>results</computeroutput> array. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest acceptable matching %, as a value between 0 and 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum results generated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="48" column="1" bodyfile="nGramSearch.cpp" bodystart="48" bodyend="58"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a1bf34fd9c73ce48384b68102b1b85a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void release</definition>
        <argsstring>(char *const guid, char ***results, uint64_t size)</argsstring>
        <name>release</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>results</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To release the memory allocated for the result in the <computeroutput>search</computeroutput> function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>The result returned by the &lt;search&gt; function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>result</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="60" column="1" bodyfile="nGramSearch.cpp" bodystart="60" bodyend="66"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a9b9665af85ac3ef69cc7635bcd9b2a5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void releaseW</definition>
        <argsstring>(char *const guid, wchar_t ***results, uint64_t size)</argsstring>
        <name>releaseW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <param>
          <type>wchar_t ***</type>
          <declname>results</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To release the memory allocated for the result in the &lt;search&gt; function. Wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para>The result returned by the &lt;search&gt; function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of <computeroutput>result</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="68" column="1" bodyfile="nGramSearch.cpp" bodystart="68" bodyend="74"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1aaaf853ea1e0eb3fed9dfe80ebcf1bd13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void dispose</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>dispose</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To dispose a library indexed. If the library does not exist, <computeroutput>dispose</computeroutput> will ignore it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="76" column="1" bodyfile="nGramSearch.cpp" bodystart="76" bodyend="80"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1ae608fed7c79e70f7f22fcacd54598422" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> void</type>
        <definition>DLLEXP void disposeW</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>disposeW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To dispose a library indexed. If the library does not exist, <computeroutput>dispose</computeroutput> will ignore it. Wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="82" column="1" bodyfile="nGramSearch.cpp" bodystart="82" bodyend="86"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a3707fd57725e4682d59f6dd850099921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> uint64_t</type>
        <definition>DLLEXP uint64_t getSize</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>getSize</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To obtain the current word map size <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="88" column="1" bodyfile="nGramSearch.cpp" bodystart="88" bodyend="95"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a4b4a824212aaca2aaefd93c04f53c314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> uint64_t</type>
        <definition>DLLEXP uint64_t getSizeW</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>getSizeW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To obtain the current word map size Wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="97" column="1" bodyfile="nGramSearch.cpp" bodystart="97" bodyend="104"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a9605a70fe41354e09d3bd6b330e88c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> uint64_t</type>
        <definition>DLLEXP uint64_t getLibSize</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>getLibSize</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To obtain the current n-gram library size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="106" column="1" bodyfile="nGramSearch.cpp" bodystart="106" bodyend="113"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" compoundref="n_gram_search_8cpp" startline="9">indexed</references>
      </memberdef>
      <memberdef kind="function" id="n_gram_search_8cpp_1a8fc3df66eb3985c704fb6f65c4327376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref> uint64_t</type>
        <definition>DLLEXP uint64_t getLibSizeW</definition>
        <argsstring>(char *const guid)</argsstring>
        <name>getLibSizeW</name>
        <param>
          <type>char *const</type>
          <declname>guid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>To obtain the current n-gram library size. wide string version. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>guid</parametername>
</parameternamelist>
<parameterdescription>
<para>A unique id for the indexed library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="nGramSearch.cpp" line="115" column="1" bodyfile="nGramSearch.cpp" bodystart="115" bodyend="122"/>
        <references refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" compoundref="n_gram_search_8cpp" startline="7">mainLock</references>
        <references refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" compoundref="n_gram_search_8cpp" startline="10">indexedW</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>nGramSearch.cpp<sp/>:<sp/>Defines<sp/>the<sp/>exported<sp/>functions<sp/>for<sp/>the<sp/>DLL<sp/>application.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="n_gram_search_8h" kindref="compound">nGramSearch.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7" refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" refkind="member"><highlight class="normal">shared_mutex<sp/><ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//key<sp/>entries<sp/>for<sp/>indexed<sp/>StringIndex<sp/>class<sp/>instances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" refkind="member"><highlight class="normal">unordered_map&lt;string,<sp/>unique_ptr&lt;StringIndex&lt;string&gt;&gt;&gt;<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>;</highlight></codeline>
<codeline lineno="10" refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" refkind="member"><highlight class="normal">unordered_map&lt;string,<sp/>unique_ptr&lt;StringIndex&lt;wstring&gt;&gt;&gt;<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="n_gram_search_8h_1aaa5964579ce0a1632812d1148673924a" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1af013284ba3a5a4e52dedfb3829eb21f5" kindref="member">index2D</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_lock&lt;shared_mutex&gt;<sp/>updLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.emplace(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid),<sp/>make_unique&lt;<ref refid="class_string_index" kindref="compound">StringIndex&lt;string&gt;</ref>&gt;(words,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)size,<sp/>rowSize,<sp/>weight,<sp/>gSize));</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="n_gram_search_8h_1afc53fa96346d221be5827943db60aac4" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1a7004665131db8bedab1bac753eb74afa" kindref="member">index2DW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">***<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_lock&lt;shared_mutex&gt;<sp/>updLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.emplace(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid),<sp/>make_unique&lt;<ref refid="class_string_index" kindref="compound">StringIndex&lt;wstring&gt;</ref>&gt;(words,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)size,<sp/>rowSize,<sp/>weight,<sp/>gSize));</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="n_gram_search_8h_1a2d23f58044dff7a9715b0f36aba5a69a" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1a1f2a9cd58e608bec8e0d916a16c56677" kindref="member">index</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_lock&lt;shared_mutex&gt;<sp/>updLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.emplace(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid),<sp/>make_unique&lt;<ref refid="class_string_index" kindref="compound">StringIndex&lt;string&gt;</ref>&gt;(words,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)size,<sp/>rowSize,<sp/>weight,<sp/>gSize));</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="n_gram_search_8h_1aad19cfae74665ec71b1768bd6ba5a342" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1ae6a0e417451a810549d7ac565af86a37" kindref="member">indexW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_lock&lt;shared_mutex&gt;<sp/>updLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.emplace(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid),<sp/>make_unique&lt;<ref refid="class_string_index" kindref="compound">StringIndex&lt;wstring&gt;</ref>&gt;(words,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)size,<sp/>rowSize,<sp/>weight,<sp/>gSize));</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="n_gram_search_8h_1a8769607b12e99984ad3ee0e8ab1ff6eb" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1a23c98275cff594b7e64b62a086f04dd2" kindref="member">search</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>query,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/>results,<sp/>uint32_t*<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold,<sp/>uint32_t<sp/>limit)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_lock&lt;shared_mutex&gt;<sp/>sharedLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pkeyPair<sp/>=<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pkeyPair<sp/>!=<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.end())</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>instance<sp/>=<sp/>pkeyPair-&gt;second;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sharedLock.unlock();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance-&gt;search(query,<sp/>results,<sp/>size,<sp/>threshold,<sp/>limit);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="n_gram_search_8h_1a2b6cf6d441b1ac4e82251f7f3c806965" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1ab6258c7b1ad261783e75156ba81d97e6" kindref="member">searchW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>query,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">***<sp/>results,<sp/>uint32_t*<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold,<sp/>uint32_t<sp/>limit)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_lock&lt;shared_mutex&gt;<sp/>sharedLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pkeyPair<sp/>=<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pkeyPair<sp/>!=<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.end())</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>instance<sp/>=<sp/>pkeyPair-&gt;second;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sharedLock.unlock();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instance-&gt;search(query,<sp/>results,<sp/>size,<sp/>threshold,<sp/>limit);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="n_gram_search_8h_1a1bf34fd9c73ce48384b68102b1b85a61" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1a1bf34fd9c73ce48384b68102b1b85a61" kindref="member">release</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***<sp/>results,<sp/>uint64_t<sp/>size)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_lock&lt;shared_mutex&gt;<sp/>sharedLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instance<sp/>=<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance<sp/>!=<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.end())</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(instance-&gt;second)-&gt;release(results,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)size);</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="n_gram_search_8h_1a9b9665af85ac3ef69cc7635bcd9b2a5c" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1a9b9665af85ac3ef69cc7635bcd9b2a5c" kindref="member">releaseW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">***<sp/>results,<sp/>uint64_t<sp/>size)</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_lock&lt;shared_mutex&gt;<sp/>sharedLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instance<sp/>=<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance<sp/>!=<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.end())</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(instance-&gt;second)-&gt;release(results,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)size);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="n_gram_search_8h_1aaaf853ea1e0eb3fed9dfe80ebcf1bd13" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1aaaf853ea1e0eb3fed9dfe80ebcf1bd13" kindref="member">dispose</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid)</highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_lock&lt;shared_mutex&gt;<sp/>updLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.erase(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="n_gram_search_8h_1ae608fed7c79e70f7f22fcacd54598422" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="n_gram_search_8cpp_1ae608fed7c79e70f7f22fcacd54598422" kindref="member">disposeW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>unique_lock&lt;shared_mutex&gt;<sp/>updLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.erase(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="n_gram_search_8h_1a3707fd57725e4682d59f6dd850099921" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/>uint64_t<sp/><ref refid="n_gram_search_8cpp_1a3707fd57725e4682d59f6dd850099921" kindref="member">getSize</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_lock&lt;shared_mutex&gt;<sp/>sharedLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instance<sp/>=<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance<sp/>!=<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.end())</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance-&gt;second-&gt;size();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="n_gram_search_8h_1a4b4a824212aaca2aaefd93c04f53c314" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/>uint64_t<sp/><ref refid="n_gram_search_8cpp_1a4b4a824212aaca2aaefd93c04f53c314" kindref="member">getSizeW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_lock&lt;shared_mutex&gt;<sp/>sharedLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instance<sp/>=<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance<sp/>!=<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.end())</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance-&gt;second-&gt;size();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="n_gram_search_8h_1a9605a70fe41354e09d3bd6b330e88c29" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/>uint64_t<sp/><ref refid="n_gram_search_8cpp_1a9605a70fe41354e09d3bd6b330e88c29" kindref="member">getLibSize</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_lock&lt;shared_mutex&gt;<sp/>sharedLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instance<sp/>=<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance<sp/>!=<sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>.end())</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance-&gt;second-&gt;libSize();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}<sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="n_gram_search_8h_1a8fc3df66eb3985c704fb6f65c4327376" refkind="member"><highlight class="normal"><ref refid="n_gram_search_8h_1aac43065921bf748ac6d1050bb5d2f2ea" kindref="member">DLLEXP</ref><sp/>uint64_t<sp/><ref refid="n_gram_search_8cpp_1a8fc3df66eb3985c704fb6f65c4327376" kindref="member">getLibSizeW</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>guid)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>shared_lock&lt;shared_mutex&gt;<sp/>sharedLock(<ref refid="n_gram_search_8cpp_1aa54d9680f7a2ed413c7a1bb5c4f13a3a" kindref="member">mainLock</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>instance<sp/>=<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.find(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(guid));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(instance<sp/>!=<sp/><ref refid="n_gram_search_8cpp_1a976a26ffdb406b824a234d5e43ef7b28" kindref="member">indexedW</ref>.end())</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance-&gt;second-&gt;libSize();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="126" refid="class_string_index_1a924cd52b4e055853db22f89e73f71fce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a924cd52b4e055853db22f89e73f71fce" kindref="member">StringIndex&lt;str_t&gt;::getGrams</ref>(str_t*<sp/>str)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str-&gt;size()<sp/>-<sp/>gramSize<sp/>+<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>gram<sp/>=<sp/>str-&gt;substr(i,<sp/>gramSize);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ngrams[gram].insert(str);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="136" refid="class_string_index_1a1b66797dae7f0f1d4f3cf830dfeee869" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a924cd52b4e055853db22f89e73f71fce" kindref="member">StringIndex&lt;str_t&gt;::getGrams</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str_t&amp;<sp/>str,<sp/>std::vector&lt;str_t&gt;&amp;<sp/>generatedGrams)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.size()<sp/>-<sp/>gramSize<sp/>+<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>generatedGrams.emplace_back(str.substr(i,<sp/>gramSize));</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="143" refid="class_string_index_1a7e326eb6fe367a6758c21aefbf64fe51" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a7e326eb6fe367a6758c21aefbf64fe51" kindref="member">StringIndex&lt;str_t&gt;::buildGrams</ref>()</highlight></codeline>
<codeline lineno="144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(str_t&amp;<sp/>str<sp/>:<sp/>longLib)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getGrams(&amp;str);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="151" refid="class_string_index_1a56c849706990da23bb621522da959fa9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a56c849706990da23bb621522da959fa9" kindref="member">StringIndex&lt;str_t&gt;::init</ref>(std::unordered_map&lt;str_t,<sp/>std::vector&lt;std::pair&lt;str_t,<sp/>float&gt;&gt;&gt;&amp;<sp/>tempWordMap)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>wordMap.clear();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>shortLib.clear();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>longLib.clear();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>wordMap.reserve(tempWordMap.size());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//to<sp/>separate<sp/>the<sp/>long<sp/>and<sp/>short<sp/>libs,<sp/>since<sp/>different<sp/>algorithms<sp/>will<sp/>be<sp/>applied<sp/>upon<sp/>searches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>keyPair<sp/>:<sp/>tempWordMap)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>str<sp/>=<sp/>keyPair.first;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.size()<sp/>&gt;=<sp/>(size_t)gramSize<sp/>*<sp/>2)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longLib.push_back(str);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shortLib.push_back(str);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//use<sp/>pointers<sp/>in<sp/>wordMap<sp/>instead<sp/>of<sp/>replicating<sp/>the<sp/>whole<sp/>string<sp/>to<sp/>save<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//the<sp/>pointers<sp/>should<sp/>be<sp/>unique<sp/>for<sp/>each<sp/>string<sp/>with<sp/>the<sp/>above<sp/>processing,<sp/>so<sp/>they<sp/>make<sp/>a<sp/>good<sp/>hash<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>str<sp/>:<sp/>shortLib)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wordMap[&amp;str]<sp/>=<sp/>std::move(tempWordMap[str]);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>str<sp/>:<sp/>longLib)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wordMap[&amp;str]<sp/>=<sp/>std::move(tempWordMap[str]);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Each<sp/>future<sp/>involves<sp/>an<sp/>overhead<sp/>of<sp/>about<sp/>1-2<sp/>us,<sp/>so<sp/>I<sp/>am<sp/>limiting<sp/>the<sp/>number<sp/>of<sp/>futures<sp/>to<sp/>hardware<sp/>concurrency</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nThrd<sp/>=<sp/>std::thread::hardware_concurrency();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeNeeded<sp/>=<sp/>(size_t)ceil((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)shortLib.size()<sp/>/<sp/>nThrd);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sizeNeeded<sp/>&gt;<sp/>sectionSize)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sectionSize<sp/>=<sp/>sizeNeeded;</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="184" refid="class_string_index_1aec0c7112ef81d953265033f9a779730f" refkind="member"><highlight class="normal"><ref refid="class_string_index_1aec0c7112ef81d953265033f9a779730f" kindref="member">StringIndex&lt;str_t&gt;::StringIndex</ref>(<ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>**<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gSize<sp/>&lt;<sp/>2<sp/>||<sp/>size<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;str_t,<sp/>std::vector&lt;std::pair&lt;str_t,<sp/>float&gt;&gt;&gt;<sp/>tempWordMap(size);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i<sp/>+=<sp/>rowSize)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>strKey(words[i]);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(strKey);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strKey.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>upperKey(strKey);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escapeBlank(upperKey);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(upperKey);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toUpper(upperKey);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>currentWeight<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>weight[i];</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempWordMap[upperKey].emplace_back(make_pair(strKey,<sp/>currentWeight));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>i<sp/>+<sp/>rowSize;<sp/>j++)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(words[j])</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>strQuery(words[j]);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escapeBlank(strQuery);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(strQuery);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toUpper(strQuery);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strQuery.size()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>weight[j];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempWordMap[strQuery].emplace_back(make_pair(strKey,<sp/>currentWeight));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>gramSize<sp/>=<sp/>gSize;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>init(tempWordMap);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>buildGrams();</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="227" refid="class_string_index_1ab7114eb0acf9e736de851487398a4cef" refkind="member"><highlight class="normal"><ref refid="class_string_index_1aec0c7112ef81d953265033f9a779730f" kindref="member">StringIndex&lt;str_t&gt;::StringIndex</ref>(std::vector&lt;std::vector&lt;str_t&gt;&gt;&amp;<sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/>gSize,<sp/>std::vector&lt;std::vector&lt;float&gt;&gt;&amp;<sp/>weight)</highlight></codeline>
<codeline lineno="228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gSize<sp/>&lt;<sp/>2<sp/>||<sp/>words.size()<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;str_t,<sp/>pair&lt;str_t,<sp/>float&gt;&gt;<sp/>tempWordMap(size);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>words.size();<sp/>i++)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>row<sp/>=<sp/>words[i];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>strKey(row[0]);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(strKey);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strKey.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>upperKey(strKey);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toUpper(upperKey);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>currentWeight<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>weight[i][0];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempWordMap[upperKey].emplace_back(make_pair(strKey,<sp/>currentWeight));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>row.size();<sp/>j++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>strQuery(row[j]);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(strQuery);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strQuery.size()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>weight[i][j];</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toUpper(strQuery);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempWordMap[strQuery].emplace_back(make_pair(strKey,<sp/>currentWeight));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>gramSize<sp/>=<sp/>gSize;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>init(tempWordMap);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>buildGrams();</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="269" refid="class_string_index_1a2e323737994e475a5e5b6ccc9f631fff" refkind="member"><highlight class="normal"><ref refid="class_string_index_1aec0c7112ef81d953265033f9a779730f" kindref="member">StringIndex&lt;str_t&gt;::StringIndex</ref>(<ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>***<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>words,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>rowSize,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">**<sp/>weight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>gSize)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gSize<sp/>&lt;<sp/>2<sp/>||<sp/>size<sp/>&lt;<sp/>2)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;str_t,<sp/>std::vector&lt;std::pair&lt;str_t,<sp/>float&gt;&gt;&gt;<sp/>tempWordMap(size);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>strKey(words[i][0]);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(strKey);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strKey.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>upperKey(strKey);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escapeBlank(upperKey);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(upperKey);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toUpper(upperKey);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>currentWeight<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>weight[i][0];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempWordMap[upperKey].emplace_back(make_pair(strKey,<sp/>currentWeight));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint16_t<sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;<sp/>rowSize;<sp/>j++)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(words[i][j])</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>strQuery(words[i][j]);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>escapeBlank(strQuery);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trim(strQuery);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toUpper(strQuery);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strQuery.size()<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>0.0f;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight)</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentWeight<sp/>=<sp/>weight[i][j];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toUpper(strQuery);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempWordMap[strQuery].emplace_back(make_pair(strKey,<sp/>currentWeight));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>gramSize<sp/>=<sp/>gSize;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>init(tempWordMap);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>buildGrams();</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="313" refid="class_string_index_1a97835599308c1e5feb47323545584dfd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a97835599308c1e5feb47323545584dfd" kindref="member">StringIndex&lt;str_t&gt;::stringMatch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str_t&amp;<sp/>query,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str_t&amp;<sp/>source,<sp/>std::vector&lt;size_t&gt;&amp;<sp/>row1,<sp/>std::vector&lt;size_t&gt;&amp;<sp/>row2)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(query.size()<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ch<sp/>:<sp/>source)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ch<sp/>==<sp/>query[0])</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>qSize<sp/>=<sp/>query.size();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sSize<sp/>=<sp/>source.size();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maxSize<sp/>=<sp/>max(qSize,<sp/>sSize);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>fill(row1.begin(),<sp/>row1.end(),<sp/>0);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>0;<sp/>q<sp/>&lt;<sp/>qSize;<sp/>q++)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row2[0]<sp/>=<sp/>q<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>sSize;<sp/>s++)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cost<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(query[q]<sp/>!=<sp/>source[s])</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cost<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row2[s<sp/>+<sp/>1]<sp/>=</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min(</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min(</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row1[s<sp/>+<sp/>1]<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row2[s]<sp/>+<sp/>1),</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row1[s]<sp/>+<sp/>cost);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(row1,<sp/>row2);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//memset(row2,<sp/>0,<sp/>sizeof(unsigned)<sp/>*<sp/>(maxSize<sp/>+<sp/>1));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fill(row2.begin(),<sp/>row2.end(),<sp/>0);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>misMatch<sp/>=<sp/>(numeric_limits&lt;size_t&gt;::max)();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sSize<sp/>+<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row1[i]<sp/>&lt;<sp/>misMatch)</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>misMatch<sp/>=<sp/>row1[i];</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>qSize<sp/>-<sp/>misMatch;</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="355" refid="class_string_index_1a32f2294a19ad5360bd62f1ede07c6c5e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a32f2294a19ad5360bd62f1ede07c6c5e" kindref="member">StringIndex&lt;str_t&gt;::getMatchScore</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>str_t&amp;<sp/>query,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>first,<sp/>std::vector&lt;str_t*&gt;&amp;<sp/>targets,<sp/>std::vector&lt;float&gt;&amp;<sp/>currentScore)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//allocate<sp/>levenstein<sp/>temporary<sp/>containers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxSize<sp/>=<sp/>max(query.size(),<sp/>(size_t)gramSize<sp/>*<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;size_t&gt;<sp/>row1(maxSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;size_t&gt;<sp/>row2(maxSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>first;<sp/>i<sp/>&lt;<sp/>first<sp/>+<sp/>sectionSize<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>shortLib.size();<sp/>i++)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t&amp;<sp/>source<sp/>=<sp/>shortLib[i];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>match<sp/>=<sp/>stringMatch(query,<sp/>source,<sp/>row1,<sp/>row2);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currentScore[i]<sp/>=<sp/>(float)match<sp/>/<sp/>query.size();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>targets[i]<sp/>=<sp/>&amp;source;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="371" refid="class_string_index_1a309f7697439fb3428de3c63dca6cdaa4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a309f7697439fb3428de3c63dca6cdaa4" kindref="member">StringIndex&lt;str_t&gt;::searchShort</ref>(str_t&amp;<sp/>query,<sp/>unordered_map&lt;str_t*,<sp/>float&gt;&amp;<sp/>score)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>query.size();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dicSize<sp/>=<sp/>shortLib.size();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;str_t*&gt;<sp/>targets(dicSize);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;float&gt;<sp/>currentScore(dicSize);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;future&lt;void&gt;&gt;<sp/>futures;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;<sp/>count<sp/>&lt;<sp/>dicSize;<sp/>count<sp/>+=<sp/>sectionSize)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>futures.emplace_back(async(&amp;<ref refid="class_string_index_1a32f2294a19ad5360bd62f1ede07c6c5e" kindref="member">StringIndex::getMatchScore</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>cref(query),<sp/>count,<sp/>ref(targets),<sp/>ref(currentScore)));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fu<sp/>:<sp/>futures)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fu.get();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dicSize;<sp/>i++)</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score[targets[i]]<sp/>+=<sp/>currentScore[i];</highlight></codeline>
<codeline lineno="384"><highlight class="normal">}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//template&lt;class<sp/>str_t&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>StringIndex&lt;str_t&gt;::searchShort(str_t&amp;<sp/>query,<sp/>unordered_map&lt;str_t*,<sp/>float&gt;&amp;<sp/>score)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>str_t<sp/>signature<sp/>=<sp/>getHash(query);<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="394" refid="class_string_index_1a80ddf83f3f207004142458317609c6d6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a80ddf83f3f207004142458317609c6d6" kindref="member">StringIndex&lt;str_t&gt;::searchLong</ref>(str_t&amp;<sp/>query,<sp/>unordered_map&lt;str_t*,<sp/>float&gt;&amp;<sp/>score)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>query.size();</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)gramSize)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;str_t&gt;<sp/>generatedGrams;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>generatedGrams.reserve(len<sp/>-<sp/>gramSize<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>getGrams(query,<sp/>generatedGrams);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(generatedGrams.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;str_t*,<sp/>size_t&gt;<sp/>rawScore(longLib.size());</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//may<sp/>consider<sp/>parallelsm<sp/>here<sp/>in<sp/>the<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>str<sp/>:<sp/>generatedGrams)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sourceSet<sp/>=<sp/>ngrams[str];</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>match<sp/>:<sp/>sourceSet)</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rawScore[</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">str_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(match)]++;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kp<sp/>:<sp/>rawScore)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score[kp.first]<sp/>=<sp/>(float)kp.second<sp/>/<sp/>generatedGrams.size();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/><sp/><sp/>float<sp/>misMatchFactor<sp/>=<sp/>std::acosf(distanceFactor)<sp/>/<sp/>len<sp/>/<sp/>len;</highlight></codeline>
<codeline lineno="418"><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(auto&amp;<sp/>kp<sp/>:<sp/>rawScore)</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;size_t&gt;&amp;<sp/>position<sp/>=<sp/>kp.second;</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>longest<sp/>=<sp/>0,<sp/>longestStart<sp/>=<sp/>0,<sp/>longestEnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//find<sp/>longest<sp/>consective<sp/>sequence</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>position.size();<sp/>i++)</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>==<sp/>position.size()<sp/>||<sp/>position[i<sp/>-<sp/>1]<sp/>!=<sp/>position[i]<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i<sp/>-<sp/>start<sp/>&gt;<sp/>longest)</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longest<sp/>=<sp/>i<sp/>-<sp/>start;</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longestStart<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>longestEnd<sp/>=<sp/>i<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>distance<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>position.size();<sp/>i++)</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance<sp/>+=<sp/>(size_t)abs((long<sp/>long)i<sp/>-<sp/>(long<sp/>long)longestStart)<sp/>-<sp/>((long<sp/>long)position[i]<sp/>-<sp/>(long<sp/>long)position[longestStart]);</highlight></codeline>
<codeline lineno="441"><highlight class="comment"></highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(distance<sp/>&gt;<sp/>len<sp/>*<sp/>len)</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>distance<sp/>=<sp/>len<sp/>*<sp/>len;</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>penalty<sp/>=<sp/>distanceFactor<sp/>*<sp/>std::cosf(misMatchFactor<sp/>*<sp/>distance);</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>score[kp.first]<sp/>+=<sp/>1<sp/>-<sp/>penalty;</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="451" refid="class_string_index_1adedd1463c2745dcd1e36ee672f6a6613" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1adedd1463c2745dcd1e36ee672f6a6613" kindref="member">StringIndex&lt;str_t&gt;::_search</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>*<sp/>query,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>limit,<sp/>vector&lt;str_t&gt;&amp;<sp/>result)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>str_t<sp/>queryStr(query);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>escapeBlank(queryStr);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>trim(queryStr);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queryStr.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>toUpper(queryStr);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;str_t*,<sp/>float&gt;<sp/>scoreShort(shortLib.size());</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;str_t*,<sp/>float&gt;<sp/>scoreLong(longLib.size());</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;future&lt;void&gt;&gt;<sp/>futures;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>query<sp/>is<sp/>long,<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>search<sp/>for<sp/>short<sp/>sequences.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queryStr.size()<sp/>&lt;<sp/>(size_t)gramSize<sp/>*<sp/>10)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>futures.emplace_back(</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::async(std::launch::async,<sp/>&amp;<ref refid="class_string_index_1a309f7697439fb3428de3c63dca6cdaa4" kindref="member">StringIndex::searchShort</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::ref(queryStr),<sp/>ref(scoreShort))</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>futures.emplace_back(</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::async(std::launch::async,<sp/>&amp;<ref refid="class_string_index_1a80ddf83f3f207004142458317609c6d6" kindref="member">StringIndex::searchLong</ref>,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::ref(queryStr),<sp/>ref(scoreLong))</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fu<sp/>:<sp/>futures)</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fu.get();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//merge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>unordered_map&lt;str_t,<sp/>float&gt;<sp/>entryScore(scoreShort.size()<sp/>+<sp/>scoreLong.size());</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>keyPair<sp/>:<sp/>scoreShort)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyPair.second<sp/>&lt;<sp/>threshold)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t*<sp/>term<sp/>=<sp/>keyPair.first;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapped<sp/>=<sp/>wordMap.find(term);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapped<sp/>!=<sp/>wordMap.end())</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>(*mapped).second)</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>res<sp/>=<sp/>item.first;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>itemScore<sp/>=<sp/>item.second<sp/>*<sp/>keyPair.second;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entryScore[res]<sp/>=<sp/>itemScore;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>keyPair<sp/>:<sp/>scoreLong)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(keyPair.second<sp/>&lt;<sp/>threshold)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t*<sp/>term<sp/>=<sp/>keyPair.first;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mapped<sp/>=<sp/>wordMap.find(term);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapped<sp/>!=<sp/>wordMap.end())</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>item<sp/>:<sp/>(*mapped).second)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str_t<sp/>res<sp/>=<sp/>item.first;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>itemScore<sp/>=<sp/>max(item.second<sp/>*<sp/>keyPair.second,<sp/>entryScore[res]);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entryScore[res]<sp/>=<sp/>itemScore;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;pair&lt;str_t,<sp/>float&gt;&gt;<sp/>scoreElems(entryScore.begin(),<sp/>entryScore.end());</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>endIt<sp/>=<sp/>scoreElems.end();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scoreElems.size()<sp/>&gt;<sp/>limit)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endIt<sp/>=<sp/>scoreElems.begin()<sp/>+<sp/>limit;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>partial_sort(scoreElems.begin(),<sp/>endIt,<sp/>scoreElems.end(),<sp/>compareScores&lt;str_t&gt;);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>endIt<sp/>=<sp/>scoreElems.end();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(scoreElems.size()<sp/>&gt;<sp/>limit)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endIt<sp/>=<sp/>scoreElems.begin()<sp/>+<sp/>limit;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>result.reserve(min(limit,<sp/>scoreElems.size()));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>scoreElems.begin();<sp/>i<sp/>&lt;<sp/>endIt;<sp/>i++)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result.push_back((*i).first);</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="519" refid="class_string_index_1aa11036396dce714b8c383564ffeaac70" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1aa11036396dce714b8c383564ffeaac70" kindref="member">StringIndex&lt;str_t&gt;::search</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>*<sp/>query,<sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>***<sp/>results,<sp/>uint32_t*<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>threshold,<sp/>uint32_t<sp/>limit)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="n_gram_search_8cpp_1ad55ada7f4591fa63653a5ab560568037" kindref="member">indexed</ref>)</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limit<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>limit<sp/>=<sp/>(numeric_limits&lt;int32_t&gt;::max)();</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;str_t&gt;<sp/>result;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>_search(query,<sp/>threshold,<sp/>limit,<sp/>result);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//transform<sp/>to<sp/>C<sp/>ABI<sp/>using<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>*size<sp/>=<sp/>(uint32_t)result.size();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>*results<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>*[*size];</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>*size;<sp/>i++)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>item<sp/>=<sp/>result[i];</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>resStr<sp/>=<sp/>item.c_str();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>item.size();</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*results)[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>[len<sp/>+<sp/>1]();</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((*results)[i],<sp/>resStr,<sp/>len);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="545" refid="class_string_index_1a014f9cc45c6e06aa25b04186c89ec032" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_string_index_1a014f9cc45c6e06aa25b04186c89ec032" kindref="member">StringIndex&lt;str_t&gt;::release</ref>(<ref refid="class_string_index_1a47f131c73d15a7c10c10a9748adf45dc" kindref="member">char_t</ref>***<sp/>results,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="546"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*results)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>size;<sp/>i++)</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[](*results)[i];</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[](*results);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal">}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="556" refid="class_string_index_1a95acf789f43ead39b067d1c82d3a9b02" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="class_string_index_1a95acf789f43ead39b067d1c82d3a9b02" kindref="member">StringIndex&lt;str_t&gt;::size</ref>()</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wordMap.size();</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>str_t&gt;</highlight></codeline>
<codeline lineno="562" refid="class_string_index_1af92d29d09732cbf9104cc7e942859976" refkind="member"><highlight class="normal">uint64_t<sp/><ref refid="class_string_index_1af92d29d09732cbf9104cc7e942859976" kindref="member">StringIndex&lt;str_t&gt;::libSize</ref>()</highlight></codeline>
<codeline lineno="563"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ngrams.size();</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//template&lt;class<sp/>str_t&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>StringIndex&lt;str_t&gt;::buildHash()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(auto&amp;<sp/>str<sp/>:<sp/>shortLib)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>approxHash[&amp;str]<sp/>=<sp/>getHash(str);;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//template&lt;class<sp/>str_t&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//str_t<sp/>StringIndex&lt;str_t&gt;::getHash(str_t&amp;<sp/>str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>set&lt;char_t&gt;<sp/>charSet;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>for<sp/>(auto<sp/>ch<sp/>:<sp/>str)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>charSet.insert(ch);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>str_t<sp/>signature(charSet.begin(),<sp/>charSet.end());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>return<sp/>signature;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//}</highlight></codeline>
    </programlisting>
    <location file="nGramSearch.cpp"/>
  </compounddef>
</doxygen>
